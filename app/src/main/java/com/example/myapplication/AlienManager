package com.example.myapplication

import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.RectF
import android.util.Log
import android.widget.ImageView
import java.util.Random

// Interface Observable pour le pattern Observer
interface AlienObservable {
    fun addObserver(observer: AlienObserver)
    fun notifyAlienDestroyed(ligne: Int, colonne: Int, points: Int)
    fun notifyLevelCompleted()
    fun notifyAliensReachedPlayer()
}

// Interface Observer
interface AlienObserver {
    fun onAlienDestroyed(ligne: Int, colonne: Int, points: Int)
    fun onLevelCompleted()
    fun onAliensReachedPlayer()
}

// Classe de gestion des aliens
class AlienManager(
    private var screenWidth :Float,
    private val screenHeight: Float,
    private val alienBitmaps: List<Bitmap>,
    private val joueurImageView: ImageView
) : AlienObservable {
    companion object {
        private const val ROWS = 5
        private const val COLUMNS = 10
        private const val DESCENT_STEP = 15f
    }

    private val observers = mutableListOf<AlienObserver>()
    private val aliensVivants = Array(ROWS) { Array(COLUMNS) { true } }
    private var offsetX = 0f
    private var offsetY = 20f
    private var direction = 1 // 1 pour aller à droite, -1 pour aller à gauche
    private val random = Random()

    // Données pour le tir des aliens
    private var lastAlienShotTime = 0L
    private val alienShotInterval = 2000L // 2 secondes entre les tirsa

    // Structure de données pour un résultat de collision
    data class CollisionResult(val ligne: Int, val colonne: Int, val x: Float, val y: Float)

    // Implémenter les méthodes de l'interface AlienObservable
    override fun addObserver(observer: AlienObserver) {
        observers.add(observer)
    }

    override fun notifyAlienDestroyed(ligne: Int, colonne: Int, points: Int) {
        observers.forEach { it.onAlienDestroyed(ligne, colonne, points) }
    }

    override fun notifyLevelCompleted() {
        observers.forEach { it.onLevelCompleted() }
    }

    override fun notifyAliensReachedPlayer() {
        observers.forEach { it.onAliensReachedPlayer() }
    }

    // Mettre à jour le mouvement des aliens
    fun updateMovement(vitesse: Float) {
        // Mettre à jour le décalage horizontal
        var vitesse = 20f
        offsetX += direction * vitesse

        // Calculer la largeur totale occupée par les aliens
        val espaceEntreAliens = screenWidth * 0.02f
        val tailleAlien = alienBitmaps[0].width.toFloat()
        val largeurTotaleAliens = COLUMNS * (tailleAlien + espaceEntreAliens)

        // Changer de direction si le premier ou le dernier alien atteint les bords de l'écran
        if (offsetX + largeurTotaleAliens >= screenWidth + 1150 || offsetX <= 0) {
            direction *= -1 // Inverser la direction
            offsetY += DESCENT_STEP // Descendre les aliens verticalement
        }
    }

    // Sélectionner aléatoirement un alien pour tirer
    fun selectAlienForShot(): Triple<Float, Float, Int>? {
        val currentTime = System.currentTimeMillis()

        if (currentTime - lastAlienShotTime <= alienShotInterval) {
            return null
        }

        val candidateAliens = mutableListOf<Triple<Int, Int, Float>>()

        for (ligne in 0 until ROWS) {
            for (colonne in 0 until COLUMNS) {
                if (aliensVivants[ligne][colonne]) {
                    // Donner la priorité aux aliens du bas (plus proches du joueur)
                    candidateAliens.add(Triple(ligne, colonne, (ROWS - ligne).toFloat()))
                }
            }
        }

        if (candidateAliens.isEmpty()) {
            return null
        }

        // Sélectionner un alien avec une probabilité plus élevée pour ceux du bas
        val totalWeight = candidateAliens.sumOf { it.third.toDouble() }
        var randomValue = random.nextDouble() * totalWeight
        var selectedAlien: Triple<Int, Int, Float>? = null

        for (alien in candidateAliens) {
            randomValue -= alien.third
            if (0 >= randomValue) {
                selectedAlien = alien
                break
            }
        }

        selectedAlien = selectedAlien ?: candidateAliens.last()

        // Créer un missile selon le type d'alien
        val ligne = selectedAlien.first
        val colonne = selectedAlien.second

        val espaceEntreAliens = screenWidth * 0.02f
        val tailleAlien = alienBitmaps[0].width.toFloat()

        val alienX = colonne * (tailleAlien + espaceEntreAliens) + espaceEntreAliens + offsetX + tailleAlien / 2
        val alienY = ligne * (tailleAlien + espaceEntreAliens) + espaceEntreAliens + offsetY + tailleAlien

        lastAlienShotTime = currentTime

        // Retourner position et type d'alien
        return Triple(alienX, alienY, ligne % 3)
    }

    // Dessiner les aliens
    fun drawAliens(canvas: Canvas) {
        val espaceEntreAliens = screenWidth * 0.02f
        val tailleAlien = alienBitmaps[0].width.toFloat() // Taille déjà redimensionnée

        // Dessiner les aliens
        for (ligne in 0 until ROWS) {
            val alienBitmap = alienBitmaps[ligne % alienBitmaps.size] // Choisir l'image en fonction de la ligne
            for (colonne in 0 until COLUMNS) {
                // Ne dessiner que les aliens vivants
                if (aliensVivants[ligne][colonne]) {
                    val x = colonne * (tailleAlien + espaceEntreAliens) + espaceEntreAliens + offsetX
                    val y = ligne * (tailleAlien + espaceEntreAliens) + espaceEntreAliens + offsetY
                    canvas.drawBitmap(alienBitmap, x, y, null)
                }
            }
        }
    }

    // Vérifier les collisions avec les aliens
    fun checkCollisionWithAliens(missileRect: RectF): CollisionResult? {
        val espaceEntreAliens = screenWidth * 0.02f
        val tailleAlien = alienBitmaps[0].width.toFloat()

        for (ligne in 0 until ROWS) {
            for (colonne in 0 until COLUMNS) {
                if (aliensVivants[ligne][colonne]) {
                    val x = colonne * (tailleAlien + espaceEntreAliens) + espaceEntreAliens + offsetX
                    val y = ligne * (tailleAlien + espaceEntreAliens) + espaceEntreAliens + offsetY

                    // Rectangle de l'alien
                    val alienRect = RectF(x, y, x + tailleAlien, y + tailleAlien)

                    // Vérifier s'il y a collision
                    if (RectF.intersects(missileRect, alienRect)) {
                        // Marquer l'alien comme mort
                        aliensVivants[ligne][colonne] = false

                        // Vérifier si tous les aliens sont détruits
                        checkAllAliensDestroyed()

                        // Retourner les informations de collision
                        return CollisionResult(ligne, colonne, x + tailleAlien / 2, y + tailleAlien / 2)
                    }
                }
            }
        }

        return null
    }

    // Vérifier si les aliens ont atteint le joueur
    fun checkAliensReachedPlayer(): Boolean {
        var lowestAlienY = 0f
        val espaceEntreAliens = screenWidth * 0.02f
        val tailleAlien = alienBitmaps[0].width.toFloat()

        // Trouver l'alien vivant le plus bas
        for (ligne in 0 until ROWS) {
            for (colonne in 0 until COLUMNS) {
                if (aliensVivants[ligne][colonne]) {
                    val y = ligne * (tailleAlien + espaceEntreAliens) + espaceEntreAliens + offsetY
                    val bottomY = y + tailleAlien

                    if (bottomY > lowestAlienY) {
                        lowestAlienY = bottomY
                    }
                }
            }
        }

        // Position Y du joueur
        val location = IntArray(2)
        joueurImageView.getLocationOnScreen(location)
        val joueurY = location[1].toFloat()

        // Vérifier si les aliens ont atteint la position Y du joueur
        return lowestAlienY >= joueurY - tailleAlien
    }

    // Vérifier si tous les aliens sont détruits
    private fun checkAllAliensDestroyed() {
        var allDestroyed = true

        for (ligne in 0 until ROWS) {
            for (colonne in 0 until COLUMNS) {
                if (aliensVivants[ligne][colonne]) {
                    allDestroyed = false
                    break
                }
            }
            if (!allDestroyed) break
        }

        if (allDestroyed) {
            notifyLevelCompleted()
        }
    }

    // Réinitialiser les aliens pour un nouveau niveau
    // Réinitialiser les aliens pour un nouveau niveau
    fun resetAliens() {
        // Réinitialiser la position des aliens
        offsetX = 0f
        offsetY = 0f
        // Ne pas réinitialiser la direction - garder la direction actuelle
        // direction = 1 // Commenter ou supprimer cette ligne

        // Réinitialiser le statut des aliens (tous vivants)
        for (ligne in aliensVivants.indices) {
            for (colonne in aliensVivants[ligne].indices) {
                aliensVivants[ligne][colonne] = true
            }
        }
    }
}
